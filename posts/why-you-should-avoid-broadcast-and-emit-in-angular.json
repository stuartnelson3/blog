{"title":"Why you should avoid $broadcast and $emit in Angular","body":"\u003cp\u003eIn my first Angular project, I used \u003ccode\u003e$broadcast\u003c/code\u003e and \u003ccode\u003e$emit\u003c/code\u003e regularly. I had\ndata in one controller, and some other controller needed to be informed when\nthat data changed. The obvious answer was to send a message to that other\ncontroller using \u003ccode\u003e$broadcast\u003c/code\u003e or \u003ccode\u003e$emit\u003c/code\u003e. However, it soon became clear that\nsending events throughout my app like this was a bad idea.\u003c/p\u003e\n\n\u003ch2\u003eAn Example\u003c/h2\u003e\n\n\u003cp\u003eImagine an app that allows users to change the its colorscheme. A\n\u003ccode\u003eThemeController\u003c/code\u003e is declared on the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element, which it sets a \u003ccode\u003eCSS\u003c/code\u003e\nclass that changes the theme for the page. In some child \u003ccode\u003e$scope\u003c/code\u003e is the\nelement that sets the colorscheme, with a function bound to the element\u0026rsquo;s\nchange event. The \u0026ldquo;easiest\u0026rdquo; way to send this message is to \u003ccode\u003e$emit\u003c/code\u003e it up to\nthe parent \u003ccode\u003escope\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"javascript\"\u003eangular.module(\u0026quot;App.controllers\u0026quot;).controller('ThemeCtrl', function($scope) {\n  $scope.$on(\u0026quot;themeChange\u0026quot;, function(event, newTheme) {\n    $scope.theme = newTheme;\n  });\n});\n\nangular.module(\u0026quot;App.controllers\u0026quot;).controller('ChildCtrl', function($scope) {\n  $scope.changeTheme = function() {\n    $scope.$emit(\u0026quot;themeChange\u0026quot;, $scope.theme);\n  };\n});\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis looks fairly harmless at first. It\u0026rsquo;s simple, it\u0026rsquo;s only a line of code,\nand it accomplishes what you want it to. This code makes sense, too: scopes are\nrelated to each other as children, parents, and siblings, much like \u003ccode\u003eDOM\u003c/code\u003e elements.\nIt feels natural to send an event up or down this chain like you would a \u003ccode\u003eDOM\u003c/code\u003e\nevent.\u003c/p\u003e\n\n\u003cp\u003eScopes are \u003cem\u003enot\u003c/em\u003e \u003ccode\u003eDOM\u003c/code\u003e elements, though. They are (should be) a means to bind\nyour data to your views. Using \u003ccode\u003e$broadcast\u003c/code\u003e and \u003ccode\u003e$emit\u003c/code\u003e is an indication that\nyou have knowledge in one controller that needs to be moved to a central place\nso it can be accessed from the other places that need that knowledge.\u003c/p\u003e\n\n\u003ch2\u003eUsing a Service\u003c/h2\u003e\n\n\u003cp\u003eSo, what is the right way to share this data? Take that knowledge and put it\nin a service that can be injected where it is needed.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"javascript\"\u003e// Theme Manager\nangular.module(\u0026quot;App.services\u0026quot;).factory('ThemeManager', function() {\n  return {\n    theme: null,\n    setTheme: function(theme) {\n      this.theme = theme;\n    }\n  };\n});\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003eThemeCtrl\u003c/code\u003e now just exposes the theme currently stored in the \u003ccode\u003eThemeManager\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"javascript\"\u003e// Theme Controller\nangular.module(\u0026quot;App.controllers\u0026quot;).controller('ThemeCtrl', [\u0026quot;$scope\u0026quot;, \u0026quot;ThemeManager\u0026quot;, function($scope, ThemeManager) {\n  $scope.theme = function() {\n    return ThemeManager.theme;\n  };\n}]);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen, a controller at any level relative to the theme controller can change the theme on the singleton \u003ccode\u003eThemeManager\u003c/code\u003e. The change is immediately available in \u003ccode\u003eThemeCtrl\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"javascript\"\u003eangular.module(\u0026quot;App.controllers\u0026quot;).controller('ChildCtrl', function($scope) {\n  $scope.themeChange = function(theme) {\n    ThemeManager.setTheme(theme);\n  };\n});\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eBenefits\u003c/h2\u003e\n\n\u003cp\u003eThis does a few (very important) things. It:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eSimplifies your code:\n\n\u003cul\u003e\n\u003cli\u003eAll the logic for modifying and accessing the data is in one place.\u003c/li\u003e\n\u003cli\u003eEvents aren\u0026rsquo;t being sent randomly through controllers in your app; a service object is being deliberately injected and modified. This directness has the added benefit of making your code easier to reason about.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eRemoves logic from your controller:\n\n\u003cul\u003e\n\u003cli\u003eInstead of setting up listeners and emitters in your controllers, you bind functions to a single object that encapsulates all relevant knowledge. If the logic changes, you only need to make the change in your \u003ccode\u003eThemeManager\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eMakes your code easier to test:\n\n\u003cul\u003e\n\u003cli\u003eTesting that a service correctly changes a self contained property based on a function is simple. Making sure your controller is using \u003ccode\u003e$emit\u003c/code\u003e to send a message that your other controller is listening for is not.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere are probably situations in which \u003ccode\u003e$broadcast\u003c/code\u003e and \u003ccode\u003e$emit\u003c/code\u003e make sense.\nHowever, think about how you are currently using them: chances are you\u0026rsquo;re\nsharing data that should be extracted into a service. Your code will end up\ncleaner, more testable, and easier to maintain.\u003c/p\u003e\n","slug":"why-you-should-avoid-broadcast-and-emit-in-angular","createdAt":"Mar 23 2014","mtime":1395598342}